// The main library that makes it all work.

// We use fs to get our config file.
var fs = require('fs');
// We borrowed the logger from socket.io.
var Logger = require('./logger');
var URL = require('url');

// A quick method to extend objects using "roles" (aka mixins.)
// Borrowed from my own "nodemoo" project.
Object.defineProperty(Object.prototype, "extend", {
  enumerable: false,
  value : function (from, init) {
    for (var f in from) {
      if (f == 'setup')
        from.setup(this, init);
      else
        this[f] = from[f];
    }
  }
});

// The main class.
function RPG () {
  var server = this; // Make a ref to ourself.
  this.app = require('http').createServer(server.handleHTTP);
  this.io = require('socket.io').listen(this.app);
  this.log = new Logger; 
  this.config = {};
  this.configfile = '';
}

RPG.prototype.load = function (configfile) {
  this.configfile = configfile;
  var jsontext = fs.readFileSync(configfile);
  var config   = JSON.parse(jsontext);
  this.config = config;
}

RPG.prototype.handleHTTP = function (req, res) {
  var url = URL.parse(req.url);
  var page = '/index.html';
  if (url.pathname != '/')
    page = url.pathname;
  fs.readFile(rpgPath + '/docroot' + page, function (err, data) {
    if (err) {
      res.writeHead(500);
      return res.end('Error loading '+page);
    }
    res.writeHead(200);
    res.end(data);
  });
}

RPG.prototype.run = function () {
  this.app.listen(this.config.port);
  // TODO: add listeners to this.io.sockets.
  this.log.info("RPGnode started");
  // The service for RPG users.
  var rpguser = this.io.of('/rpguser').on('connection', function (socket) {
    this.log.warn("rpguser connection");
    socket.on('setname', function (name) {
      this.log.warn("Hello?");
      this.log.info("User "+name+" has set their name.");
    });
  });
}

module.exports = new RPG();

// End of library
